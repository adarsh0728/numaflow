//
//Copyright 2022 The Numaproj Authors.
//
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: mvtxdaemon.proto

package mvtxdaemon

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MonoVertexDaemonService_GetMonoVertexMetrics_FullMethodName = "/mvtxdaemon.MonoVertexDaemonService/GetMonoVertexMetrics"
	MonoVertexDaemonService_GetMonoVertexStatus_FullMethodName  = "/mvtxdaemon.MonoVertexDaemonService/GetMonoVertexStatus"
)

// MonoVertexDaemonServiceClient is the client API for MonoVertexDaemonService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// MonoVertexDaemonService is a grpc service that is used to provide APIs for giving any MonoVertex information.
type MonoVertexDaemonServiceClient interface {
	GetMonoVertexMetrics(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetMonoVertexMetricsResponse, error)
	GetMonoVertexStatus(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetMonoVertexStatusResponse, error)
}

type monoVertexDaemonServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMonoVertexDaemonServiceClient(cc grpc.ClientConnInterface) MonoVertexDaemonServiceClient {
	return &monoVertexDaemonServiceClient{cc}
}

func (c *monoVertexDaemonServiceClient) GetMonoVertexMetrics(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetMonoVertexMetricsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMonoVertexMetricsResponse)
	err := c.cc.Invoke(ctx, MonoVertexDaemonService_GetMonoVertexMetrics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monoVertexDaemonServiceClient) GetMonoVertexStatus(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetMonoVertexStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMonoVertexStatusResponse)
	err := c.cc.Invoke(ctx, MonoVertexDaemonService_GetMonoVertexStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MonoVertexDaemonServiceServer is the server API for MonoVertexDaemonService service.
// All implementations must embed UnimplementedMonoVertexDaemonServiceServer
// for forward compatibility.
//
// MonoVertexDaemonService is a grpc service that is used to provide APIs for giving any MonoVertex information.
type MonoVertexDaemonServiceServer interface {
	GetMonoVertexMetrics(context.Context, *emptypb.Empty) (*GetMonoVertexMetricsResponse, error)
	GetMonoVertexStatus(context.Context, *emptypb.Empty) (*GetMonoVertexStatusResponse, error)
	mustEmbedUnimplementedMonoVertexDaemonServiceServer()
}

// UnimplementedMonoVertexDaemonServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMonoVertexDaemonServiceServer struct{}

func (UnimplementedMonoVertexDaemonServiceServer) GetMonoVertexMetrics(context.Context, *emptypb.Empty) (*GetMonoVertexMetricsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMonoVertexMetrics not implemented")
}
func (UnimplementedMonoVertexDaemonServiceServer) GetMonoVertexStatus(context.Context, *emptypb.Empty) (*GetMonoVertexStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMonoVertexStatus not implemented")
}
func (UnimplementedMonoVertexDaemonServiceServer) mustEmbedUnimplementedMonoVertexDaemonServiceServer() {
}
func (UnimplementedMonoVertexDaemonServiceServer) testEmbeddedByValue() {}

// UnsafeMonoVertexDaemonServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MonoVertexDaemonServiceServer will
// result in compilation errors.
type UnsafeMonoVertexDaemonServiceServer interface {
	mustEmbedUnimplementedMonoVertexDaemonServiceServer()
}

func RegisterMonoVertexDaemonServiceServer(s grpc.ServiceRegistrar, srv MonoVertexDaemonServiceServer) {
	// If the following call pancis, it indicates UnimplementedMonoVertexDaemonServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MonoVertexDaemonService_ServiceDesc, srv)
}

func _MonoVertexDaemonService_GetMonoVertexMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonoVertexDaemonServiceServer).GetMonoVertexMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MonoVertexDaemonService_GetMonoVertexMetrics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonoVertexDaemonServiceServer).GetMonoVertexMetrics(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonoVertexDaemonService_GetMonoVertexStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonoVertexDaemonServiceServer).GetMonoVertexStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MonoVertexDaemonService_GetMonoVertexStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonoVertexDaemonServiceServer).GetMonoVertexStatus(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// MonoVertexDaemonService_ServiceDesc is the grpc.ServiceDesc for MonoVertexDaemonService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MonoVertexDaemonService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mvtxdaemon.MonoVertexDaemonService",
	HandlerType: (*MonoVertexDaemonServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMonoVertexMetrics",
			Handler:    _MonoVertexDaemonService_GetMonoVertexMetrics_Handler,
		},
		{
			MethodName: "GetMonoVertexStatus",
			Handler:    _MonoVertexDaemonService_GetMonoVertexStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mvtxdaemon.proto",
}

const (
	MonoVertexRuntimeService_PersistRuntimeError_FullMethodName = "/mvtxdaemon.MonoVertexRuntimeService/PersistRuntimeError"
)

// MonoVertexRuntimeServiceClient is the client API for MonoVertexRuntimeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// MonoVertexRuntimeService is a grpc service that is used to provide any vertex runtime info.
type MonoVertexRuntimeServiceClient interface {
	PersistRuntimeError(ctx context.Context, in *PersistRuntimeErrorRequest, opts ...grpc.CallOption) (*PersistRuntimeErrorResponse, error)
}

type monoVertexRuntimeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMonoVertexRuntimeServiceClient(cc grpc.ClientConnInterface) MonoVertexRuntimeServiceClient {
	return &monoVertexRuntimeServiceClient{cc}
}

func (c *monoVertexRuntimeServiceClient) PersistRuntimeError(ctx context.Context, in *PersistRuntimeErrorRequest, opts ...grpc.CallOption) (*PersistRuntimeErrorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PersistRuntimeErrorResponse)
	err := c.cc.Invoke(ctx, MonoVertexRuntimeService_PersistRuntimeError_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MonoVertexRuntimeServiceServer is the server API for MonoVertexRuntimeService service.
// All implementations must embed UnimplementedMonoVertexRuntimeServiceServer
// for forward compatibility.
//
// MonoVertexRuntimeService is a grpc service that is used to provide any vertex runtime info.
type MonoVertexRuntimeServiceServer interface {
	PersistRuntimeError(context.Context, *PersistRuntimeErrorRequest) (*PersistRuntimeErrorResponse, error)
	mustEmbedUnimplementedMonoVertexRuntimeServiceServer()
}

// UnimplementedMonoVertexRuntimeServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMonoVertexRuntimeServiceServer struct{}

func (UnimplementedMonoVertexRuntimeServiceServer) PersistRuntimeError(context.Context, *PersistRuntimeErrorRequest) (*PersistRuntimeErrorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PersistRuntimeError not implemented")
}
func (UnimplementedMonoVertexRuntimeServiceServer) mustEmbedUnimplementedMonoVertexRuntimeServiceServer() {
}
func (UnimplementedMonoVertexRuntimeServiceServer) testEmbeddedByValue() {}

// UnsafeMonoVertexRuntimeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MonoVertexRuntimeServiceServer will
// result in compilation errors.
type UnsafeMonoVertexRuntimeServiceServer interface {
	mustEmbedUnimplementedMonoVertexRuntimeServiceServer()
}

func RegisterMonoVertexRuntimeServiceServer(s grpc.ServiceRegistrar, srv MonoVertexRuntimeServiceServer) {
	// If the following call pancis, it indicates UnimplementedMonoVertexRuntimeServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MonoVertexRuntimeService_ServiceDesc, srv)
}

func _MonoVertexRuntimeService_PersistRuntimeError_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PersistRuntimeErrorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonoVertexRuntimeServiceServer).PersistRuntimeError(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MonoVertexRuntimeService_PersistRuntimeError_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonoVertexRuntimeServiceServer).PersistRuntimeError(ctx, req.(*PersistRuntimeErrorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MonoVertexRuntimeService_ServiceDesc is the grpc.ServiceDesc for MonoVertexRuntimeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MonoVertexRuntimeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mvtxdaemon.MonoVertexRuntimeService",
	HandlerType: (*MonoVertexRuntimeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PersistRuntimeError",
			Handler:    _MonoVertexRuntimeService_PersistRuntimeError_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mvtxdaemon.proto",
}

const (
	Greeter_SayHello_FullMethodName = "/mvtxdaemon.Greeter/SayHello"
)

// GreeterClient is the client API for Greeter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GreeterClient interface {
	SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error)
}

type greeterClient struct {
	cc grpc.ClientConnInterface
}

func NewGreeterClient(cc grpc.ClientConnInterface) GreeterClient {
	return &greeterClient{cc}
}

func (c *greeterClient) SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HelloReply)
	err := c.cc.Invoke(ctx, Greeter_SayHello_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GreeterServer is the server API for Greeter service.
// All implementations must embed UnimplementedGreeterServer
// for forward compatibility.
type GreeterServer interface {
	SayHello(context.Context, *HelloRequest) (*HelloReply, error)
	mustEmbedUnimplementedGreeterServer()
}

// UnimplementedGreeterServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGreeterServer struct{}

func (UnimplementedGreeterServer) SayHello(context.Context, *HelloRequest) (*HelloReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHello not implemented")
}
func (UnimplementedGreeterServer) mustEmbedUnimplementedGreeterServer() {}
func (UnimplementedGreeterServer) testEmbeddedByValue()                 {}

// UnsafeGreeterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GreeterServer will
// result in compilation errors.
type UnsafeGreeterServer interface {
	mustEmbedUnimplementedGreeterServer()
}

func RegisterGreeterServer(s grpc.ServiceRegistrar, srv GreeterServer) {
	// If the following call pancis, it indicates UnimplementedGreeterServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Greeter_ServiceDesc, srv)
}

func _Greeter_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Greeter_SayHello_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).SayHello(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Greeter_ServiceDesc is the grpc.ServiceDesc for Greeter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Greeter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mvtxdaemon.Greeter",
	HandlerType: (*GreeterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHello",
			Handler:    _Greeter_SayHello_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mvtxdaemon.proto",
}
